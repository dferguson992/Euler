import kotlin.system.measureTimeMillis

/**
 *
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 *
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 *
 * 02/2019
 *
 */

var fibonacciSequence: MutableList<Int> = arrayListOf(1, 2)

fun getNthFibTerm(n: Int): Int {
    fibonacciSequence.add(
        n,
        fibonacciSequence[n - 1] +
                fibonacciSequence[n - 2]
    )
    return fibonacciSequence[n]
}

fun generateFibonacciSequenceWhileLessThanN(n: Int) {
    var i = 2
    do {
        fibonacciSequence[i] = getNthFibTerm(i)
        i++
    } while (fibonacciSequence[fibonacciSequence.size - 1] < n)
    fibonacciSequence = fibonacciSequence.dropLast(1).toMutableList()
}

var result = 0
println("""Sum of Even Fibonacci Numbers less than ${args[0].toInt()} took ${measureTimeMillis {
    (run {
        generateFibonacciSequenceWhileLessThanN(args[0].toInt())
        result = fibonacciSequence.filter { x -> x % 2 == 0 }.sum()
    })
}} milliseconds to run and yielded result $result""")
